{"trial_id": "0000", "hyperparameters": {"space": [{"class_name": "Choice", "config": {"name": "hidden_size", "default": 64, "conditions": [], "values": [64, 128, 256, 512], "ordered": true}}, {"class_name": "Choice", "config": {"name": "decoder_output_dim", "default": 8, "conditions": [], "values": [8, 16, 32, 64, 128], "ordered": true}}, {"class_name": "Choice", "config": {"name": "final_decoder_hidden", "default": 4, "conditions": [], "values": [4, 8, 16, 32, 64], "ordered": true}}, {"class_name": "Choice", "config": {"name": "time_encoder_dim1", "default": 16, "conditions": [], "values": [16, 32, 64, 128], "ordered": true}}, {"class_name": "Choice", "config": {"name": "time_encoder_dim2", "default": 1, "conditions": [], "values": [1, 2, 4, 8], "ordered": true}}, {"class_name": "Int", "config": {"name": "num_layers", "default": null, "conditions": [], "min_value": 1, "max_value": 3, "step": 1, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout", "default": 0.0, "conditions": [], "min_value": 0.0, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation", "default": "relu", "conditions": [], "values": ["relu", "gelu"], "ordered": false}}, {"class_name": "Boolean", "config": {"name": "transform", "default": false, "conditions": []}}, {"class_name": "Boolean", "config": {"name": "layer_norm", "default": false, "conditions": []}}, {"class_name": "Int", "config": {"name": "cat_emb_size", "default": null, "conditions": [], "min_value": 4, "max_value": 4, "step": 1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 0.01, "conditions": [], "values": [0.01, 0.001, 0.0001], "ordered": true}}], "values": {"hidden_size": 128, "decoder_output_dim": 16, "final_decoder_hidden": 32, "time_encoder_dim1": 16, "time_encoder_dim2": 4, "num_layers": 3, "dropout": 0.1, "activation": "gelu", "transform": false, "layer_norm": true, "cat_emb_size": 4, "learning_rate": 0.0001, "tuner/epochs": 2, "tuner/initial_epoch": 0, "tuner/bracket": 2, "tuner/round": 0}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/Users/lorenzleisner/opt/anaconda3/envs/lleisner/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 273, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Users/lorenzleisner/opt/anaconda3/envs/lleisner/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 238, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Users/lorenzleisner/opt/anaconda3/envs/lleisner/lib/python3.10/site-packages/keras_tuner/src/tuners/hyperband.py\", line 427, in run_trial\n    return super().run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Users/lorenzleisner/opt/anaconda3/envs/lleisner/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/Users/lorenzleisner/opt/anaconda3/envs/lleisner/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"/Users/lorenzleisner/opt/anaconda3/envs/lleisner/lib/python3.10/site-packages/keras_tuner/src/engine/hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n  File \"/Users/lorenzleisner/opt/anaconda3/envs/lleisner/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/Users/lorenzleisner/opt/anaconda3/envs/lleisner/lib/python3.10/site-packages/keras/engine/data_adapter.py\", line 818, in _validate_args\n    raise ValueError(\nValueError: When providing an infinite dataset, you must specify the number of steps to run (if you did not intend to create an infinite dataset, make sure to not call `repeat()` on the dataset).\n"}